// Generated by CoffeeScript 1.12.4
(function() {
  var deleteCookie, doAjax, elByClass, elById, elByQuery, elByTag, fn, getCookie, item, j, len, newEl, observe, observeMulti, ref, serialize, setCookie, windowResized,
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (window.strindhaug == null) {
    window.strindhaug = {};
  }

  window.strindhaug.KEYUP_DELAY = 400;

  if (!(typeof console !== "undefined" && console !== null ? console.log : void 0)) {
    window.console = {
      log: function() {},
      warn: function() {},
      info: function() {},
      error: function() {}
    };
  }

  if (!(typeof _ !== "undefined" && _ !== null ? _.debounce : void 0)) {
    window._ = {
      debounce: function(fun, time) {
        return fun;
      }
    };
  }

  ref = [Element.prototype, CharacterData.prototype, DocumentType.prototype];
  fn = function(item) {
    if (item.hasOwnProperty('remove')) {
      return;
    }
    return Object.defineProperty(item, 'remove', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function() {
        var ref1;
        return this != null ? (ref1 = this.parentNode) != null ? ref1.removeChild(this) : void 0 : void 0;
      }
    });
  };
  for (j = 0, len = ref.length; j < len; j++) {
    item = ref[j];
    fn(item);
  }

  if ((typeof window !== "undefined" && window !== null ? window.matchMedia : void 0) != null) {
    window.strindhaug.gt_medium = window.matchMedia("(min-width: 800px)");
  } else {
    window.strindhaug.gt_medium = {
      matches: true
    };
  }

  elByTag = function(tagname) {
    return document.getElementsByTagName(tagname);
  };

  elById = function(id) {
    return document.getElementById(id);
  };

  elByClass = function(classname) {
    return document.getElementsByClassName(classname);
  };

  elByQuery = function(query) {
    return document.querySelector(query);
  };

  observe = function(object, type, callback) {
    if (object === null || typeof object === 'undefined') {
      return;
    }
    if (object.addEventListener) {
      return object.addEventListener(type, callback, false);
    } else if (object.attachEvent) {
      return object.attachEvent("on" + type, callback);
    } else {
      return object["on" + type] = callback;
    }
  };

  observeMulti = function(objects, type, callback) {
    var k, len1, o, results;
    results = [];
    for (k = 0, len1 = objects.length; k < len1; k++) {
      o = objects[k];
      results.push(observe(o, type, callback));
    }
    return results;
  };

  newEl = function(type, className, contentHtml) {
    var el;
    if (type == null) {
      type = "div";
    }
    el = document.createElement(type);
    if (className) {
      el.className = className;
    }
    if (contentHtml) {
      el.innerHTML = contentHtml;
    }
    return el;
  };

  window.strindhaug.onresizeTasks = [];

  windowResized = _.debounce(function() {
    var k, len1, ref1, task;
    ref1 = window.strindhaug.onresizeTasks;
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      task = ref1[k];
      task();
    }
    return void 0;
  }, 300);

  serialize = function(obj) {
    var key, str, val;
    str = [];
    for (key in obj) {
      if (!hasProp.call(obj, key)) continue;
      val = obj[key];
      str.push(encodeURIComponent(key) + "=" + encodeURIComponent(val));
    }
    return str.join("&");
  };

  doAjax = function(url, callback, errcallback, data, method, multipart, headers) {
    var key, value, xhr;
    if (errcallback == null) {
      errcallback = null;
    }
    if (data == null) {
      data = null;
    }
    if (method == null) {
      method = "GET";
    }
    if (multipart == null) {
      multipart = false;
    }
    if (headers == null) {
      headers = {};
    }
    xhr = new XMLHttpRequest();
    xhr.open(method, url);
    for (key in headers) {
      value = headers[key];
      xhr.setRequestHeader(key, value);
    }
    if (multipart) {
      xhr.setRequestHeader('Accept', 'application/json');
      xhr.send(data);
    } else {
      xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
      xhr.send(serialize(data));
    }
    xhr.onreadystatechange = function() {
      var DONE, OK, ref1;
      DONE = 4;
      OK = [200, 201, 202, 203, 204];
      if (xhr.readyState === DONE) {
        if ((ref1 = xhr.status, indexOf.call(OK, ref1) >= 0)) {
          if (callback) {
            return callback(xhr.responseText);
          }
        } else {
          if (errcallback) {
            errcallback(xhr.status);
          }
          return console.error('Error: ' + xhr.status);
        }
      }
    };
    return void 0;
  };

  setCookie = function(name, value, days) {
    var date, expires;
    if (days) {
      date = new Date();
      date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
      expires = "; expires=" + date.toGMTString();
    } else {
      expires = "";
    }
    return document.cookie = name + "=" + value + expires + "; path=/";
  };

  getCookie = function(name) {
    var c, ca, i, nameEQ;
    nameEQ = name + "=";
    ca = document.cookie.split(";");
    i = 0;
    while (i < ca.length) {
      c = ca[i];
      while (c.charAt(0) === " ") {
        c = c.substring(1, c.length);
      }
      if (c.indexOf(nameEQ) === 0) {
        return c.substring(nameEQ.length, c.length);
      }
      i++;
    }
    return null;
  };

  deleteCookie = function(name) {
    return setCookie(name, "", -1);
  };

  window.strindhaug.elByTag = elByTag;

  window.strindhaug.elById = elById;

  window.strindhaug.elByClass = elByClass;

  window.strindhaug.elByQuery = elByQuery;

  window.strindhaug.observe = observe;

  window.strindhaug.observeMulti = observeMulti;

  window.strindhaug.newEl = newEl;

  window.strindhaug.doAjax = doAjax;

  window.strindhaug.setCookie = setCookie;

  window.strindhaug.getCookie = getCookie;

  window.strindhaug.deleteCookie = deleteCookie;

  observe(document, "DOMContentLoaded", function(event) {
    console.info("INIT");
    window.onresize = windowResized;
    window.setTimeout(windowResized, 500);
    return windowResized();
  });

}).call(this);
